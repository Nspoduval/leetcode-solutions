        
        def dfs(self,r)
        
      
        
        
        
        
        #iterative sol
        
        """
        if root==None:
            return 0
        
        self.q1.put(root)
        level=0
                
        while self.q1.size!=0:
            
            s=self.q1.size
            #sub=[]
        for i in range(s):
                          
                root=self.q1.get()
                
                #sub.append(root.val)

                if root.left:
                    self.q1.put(root.left)
                   
                if root.right:
                    self.q1.put(root.right)
            
            #self.traversal.append(sub)
            level+=1
        return level
   
    recursive solution
   """ 
           
        return self.dfs(root,1)
    
    def dfs(self,root,depth):
        
        if root==None:
            return 0
        
        print("maxdepth is ",self.maxdepth)
        
        print("root is ",root.val)
        
        self.maxdepth=max(depth,self.maxdepth)
        
        self.dfs(root.left,depth+1)
        self.dfs(root.right,depth+1)
        
        return self.maxdepth
        
        """" 
       
    
    dfs(node, height, max_h):
        max_h = max(max_h, height)
        if left
            max_h = dfs(node.left, height+1, max_h)
        if right
            max_h = dfs(node.right, height+1, max_h)
        return max_h
    """
        


    """
