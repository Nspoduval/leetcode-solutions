#main logic is to track the finishing times of these jobs in the queue as that makes it easier. When a new job comes in, we need to 
#check if the arrival time is before or after the finish_time of the last job in the queue. 

#Declaring a class with members arrival_time, process_time since we need to bundle these two together


class Request:
  def __init__(self,arrival_time,process_time):
    
    self.arrival_time=arrival_time
    self.process_time=process_time
    
 #Declaring a class called Response with members dropped and start_time.
 
 class Response:
  def __init__(self,dropped,start_time):
    self.dropped=dropped
    self.start_time=start_time
    
  class Buffer:
    def __init__(self,size):
      self.size=size
      self.finish_time=[]
      
     def Process(self,request):
      
      #this function is called for each request that comes in, by the main function. Each time, the function is called,
      #need to remove all unfinished jobs as first priority.
      
      while(len(self.finish_time))>0 and self.finish_time[0]<=self.request.arrival_time:
        self.finish_time.pop(0)
        
      #if len(finish_time queue) is lesser than the stack buffer size, then need to determine the finish time of the job
      #and enter it into the queue. there are two cases-
      #either the queue is empty, in this case we process it immediately and enter the finish time of the job into the queue.
      #second case, queue is not empty, then need to check the arrival time of the current job. If the arrival time is > last
      #finish_time, then the finish_time of the new job would be arrival + processing time. If not, the finish_time would be
      #finish_time of the last job + processing_time of the new job. Either case, need to output the start _time of the job.
      
      if len(self.finish_time)<self.size:
        if len(self.finish_time)==0:
          self.finish_time.append(request.arrival_time+request.process_time)
          return Response(True,request.arrival_time)
         
        else:
          
          start_time=request.arrival_time
          
          if self.finish_time[-1]>start_time:
            start_time=self.finish_time[-1]
          
          elif self.finish_time[-1]==start_time:
            start_time=self.finis_time[-1]+1
           
          self.finish_time.append(start_time+request.process_time)
          return Response(True, start_time)
          
       else:
       
        return Response(False,-1)
        
  
  def ReadRequests(count):
    requests = []
    for i in range(count):
        arrival_time, process_time = map(int, input().strip().split())
        requests.append(Request(arrival_time, process_time))
    return requests      
        
  def ProcessRequests(requests,Buffer):
      responses=[]
      for request in requests:
        responses.append(buffer.Process(request))
      
      return responses
      
  def PrintResponses(responses):
      
      for response in responses:
        print(response.start_time if response.dropped else -1)
        
        
    if __name__ == "__main__":
      size, count = map(int, input().strip().split())
      
      requests = ReadRequests(count)

      buffer = Buffer(size)
      responses = ProcessRequests(requests, buffer)

    PrintResponses(responses)
        
        
      
 
