

class Solution(object):
    
    def __init__(self):
        self.q1=Queue()
        self.traversal=[]
        self.maxdepth=-float("inf")
        
        
    def dfs(self,root):
        
        if root==None:
            return 0
                         
        leftdepth=self.dfs(root.left)+1
        rightdepth=self.dfs(root.right)+1
            
        return max(leftdepth,rightdepth)       
        
    def topdown(self,root,depth):
        
        if root==None:
            return 0
        
        self.maxdepth=max(depth,self.maxdepth)
        
        #print("node is ",root.val,"maxdepth=",self.maxdepth,"depth=",depth)
        
        self.topdown(root.left,depth+1)
        self.topdown(root.right,depth+1)
        
        return self.maxdepth
        
        
    def maxDepth(self, root):
        """
        :type root: TreeNode
        :rtype: int
     
        
        :type root: TreeNode
        :rtype: List[List[int]]
        """
              
        #recursive
        
        #return self.topdown(root,1)
        #return self.dfs(root)
        
        return self.iter(root)
  
    
    def iter(self,root):
        
        if root==None:
            return 0
        self.q1.put(root)
        depth=0
        #self.traversal.append(root.val)
        
        while self.q1.size!=0:
            
            k=self.q1.size
            
            for i in range(k):
                
                root=self.q1.get()
                #self.traversal.append(root.val)
                
                #print("root is",root.val, "depth is",depth)
                
                if root.left:
                    self.q1.put(root.left)
                if root.right:
                    self.q1.put(root.right)
                
            depth+=1
            
        return depth
            
            
    
